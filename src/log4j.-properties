# Diretorio dos logs do projudi
HOME = /arquivosprojudi/logs

# Debug do log4j (para casos de analise dos logs).
log4j.debug = false

# Atriui os appenders rootLogger, que \u00e9 o nivel mais baixo da arvore
# de logs.
#log4j.rootLogger = PROJUDI, APLICACAO

# Define o appender para a saida de logs no console. Este appender tem
# uma configuracao com o nome do sistema (para que seja identificado no
# servidor de aplicacoes e preferencialmente um nivel de log mais baixo,
# como WARN por exemplo, para que os logs do servidor nao fiquem muito
# poluidos.
log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.conversionPattern = <Projudi> %d{dd/MM/yyyy HH:mm:ss} %-5p - %m%n

# Define o appender de log principal do projudi. Este appender ira gravar
# em um arquivo chamado "projudi.log" e neste arquivo dever\u00e3o estar as mensagens
# principais do sistema, bem como mensagens de DEBUG para depura\u00e7\u00e3o de falhas
# no sistema em testes locais.
log4j.appender.PROJUDI = org.apache.log4j.RollingFileAppender
log4j.appender.PROJUDI.File=${HOME}/projudi2.log
log4j.appender.PROJUDI.MaxFileSize=10MB
log4j.appender.PROJUDI.MaxBackupIndex=10
log4j.appender.PROJUDI.layout = org.apache.log4j.PatternLayout
log4j.appender.PROJUDI.layout.conversionPattern = %d{dd/MM/yy HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n

# Define o log da aplica\u00e7\u00e3o em si Estamos interessados nas informa\u00e7\u00f5es (exemplo:
# novo usu\u00e1rio cadastrado)
log4j.appender.APLICACAO = org.apache.log4j.RollingFileAppender
log4j.appender.APLICACAO.File=${HOME}/aplicacao2.log
log4j.appender.APLICACAO.MaxFileSize=10MB
log4j.appender.APLICACAO.MaxBackupIndex=10
log4j.appender.APLICACAO.layout = org.apache.log4j.PatternLayout
log4j.appender.APLICACAO.layout.conversionPattern = %d{dd/MM/yy HH:mm:ss} %-5p %c{1} - %m%n

#-------------------------------------------------------------------------------
# Atribui o n\u00edvel do log aos appenders e quais classes cada appender vai gerenciar
# \u00e9 utilizado o nome do pacote desejado em frente ao prefixo "log4j.logger".
# Os par\u00e2metros recebidos s\u00e3o o n\u00edvel do log gerado e o apender (pode ser mais de um)
# que ir\u00e1 gerenciar esta saida de logs.
#
# Obs.: O parametro "additivity" \u00e9 necess\u00e1rio estar "true" para a sobreposi\u00e7\u00e3o dos
# logs, ou seja, aparecer tanto no rootLogger, quanto nos apenders definidos abaixo
# geralmente usa-se false, este par\u00e2metro pode ser definido para cada log abaixo
log4j.additivity.default=false

# Este n\u00edvel \u00e9 o nivel de log mais alto da hierarquia, ou seja, tudo que sair no sistema
# e n\u00e3o for sobrescrito abaixo, ir\u00e1 para o console (desej\u00e1vel utilizar niveis baixos)
# como WARN por exemplo para n\u00e3o poluir muito o log do servidor.
log4j.rootLogger = WARN, CONSOLE

# Define o nivel de log para tudo abaixo de "aplicacao"
log4j.logger.aplicacao = WARN, APLICACAO
log4j.additivity.aplicacao=false
# Define o nivel de log para tudo abaixo de "projudi"
log4j.logger.projudi = WARN, PROJUDI
log4j.additivity.projudi=false
#-------------------------------------------------------------------------------